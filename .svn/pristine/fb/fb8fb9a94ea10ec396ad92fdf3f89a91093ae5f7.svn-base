/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nibbles;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import javax.swing.Timer;

/**
 *
 * @author karrmanns
 */
public class NibblesGUI extends javax.swing.JFrame implements KeyListener, ActionListener {
   private final int fontSize = 30;
   private Nibbles controller;
   private int currentSnake;
   private final int windowWidth = 1280;
   private final int windowHeight = 720;
   private Timer timer = new Timer(50, this);
   private static boolean mmDrawn = false;
   
    /**
     * Creates new form NibblesGUI
     */
    public NibblesGUI() {
        initComponents();
        try 
        {
            File fontFile = new File("src\\nibbles\\Px437_VGA_SquarePx.ttf");
            Font font = Font.createFont(Font.TRUETYPE_FONT, fontFile);
            GraphicsEnvironment ge = 
               GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(font);
        } 
        catch (Exception e) 
        {
           System.out.println("Font registration failed");
        }
        this.setFont(new Font("Px437 VGA SquarePx", Font.PLAIN, fontSize));
        this.setSize(windowWidth, windowHeight);
        this.setResizable(false);
        currentSnake = 0;
        controller = new Nibbles(this.getGraphics(),
                windowWidth, windowHeight,
                currentSnake);
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nibblesPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout nibblesPanelLayout = new javax.swing.GroupLayout(nibblesPanel);
        nibblesPanel.setLayout(nibblesPanelLayout);
        nibblesPanelLayout.setHorizontalGroup(
            nibblesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );
        nibblesPanelLayout.setVerticalGroup(
            nibblesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 278, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nibblesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nibblesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NibblesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NibblesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NibblesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NibblesGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               
                NibblesGUI gui = new NibblesGUI();
                gui.init();
            }});
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        if(!controller.isPaused() && !controller.inMainMenu())
        {
            controller.tick();
            if (mmDrawn)
                mmDrawn = false;
            //System.out.println("Tick-tock!");
        }
        else if (controller.inMainMenu())
        {
            if (!mmDrawn) {
                controller.drawMenu("mainMenu");
                mmDrawn = true;
            }
        }
        else if (controller.inOptionsMenu())
        {
            if (!mmDrawn) {
                controller.drawMenu("optionsMenu");
                mmDrawn = true;
            }
        }
    }
    
//    private class DoTheTicks implements Runnable
//    {
//       Nibbles controller;
//       
//       public DoTheTicks(Nibbles c)
//       {
//          controller = c;
//       }
//       
//       @Override
//       public void run()
//       {
//          while(true)
//          {
//            try {Thread.sleep(200);} catch(Exception e) {}
//            if(!controller.isPaused() && !controller.inMainMenu())
//            {
//               controller.tick();
//            }
//            else if (controller.inMainMenu())
//            {
//               controller.drawMenu("mainMenu");
//            }
//          }
//       }
//    }
    
    private void init() {
        setVisible(true);
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
    }

    @Override
    public void keyTyped(KeyEvent ke) {}

    @Override
    public void keyPressed(KeyEvent ke) {
       if (controller.inMainMenu()) {
           mmDrawn = false;
           controller.setMenu(1);
       }
       else if (controller.inOptionsMenu()) {
           mmDrawn = false;
           controller.setMenu(-1);
       }
       
        switch(ke.getKeyCode()) {
            case KeyEvent.VK_RIGHT:
                controller.setSnakeDirection(EnumDirection.RIGHT, currentSnake);
                break;
            case KeyEvent.VK_LEFT:
               controller.setSnakeDirection(EnumDirection.LEFT, currentSnake);
                break;
            case KeyEvent.VK_DOWN:
               controller.setSnakeDirection(EnumDirection.DOWN, currentSnake);
                break;
            case KeyEvent.VK_UP:
               controller.setSnakeDirection(EnumDirection.UP, currentSnake);
                break;
            case KeyEvent.VK_SPACE:
               controller.setPaused(!controller.isPaused());
               controller.sparklePause();
               break;
            case KeyEvent.VK_ESCAPE:
               controller.quitGame();
               break;
        }
    }

    @Override
    public void keyReleased(KeyEvent ke) {}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel nibblesPanel;
    // End of variables declaration//GEN-END:variables
}
