package nibbles;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import nibbles.CollisionLookup.ICollisionRun;


/**
 *
 * @author Steven
 */
public final class Nibbles {
    
    private final int fontSize = 30;
    private final int scoreX = 400;
    private final int scoreY = 25;
    private final int deathPenalty = 1000;
    private final int numPlayers;
 
    private final ArrayList<Entity> entities = new ArrayList<>();
    private final ArrayList<Entity> bufferRemove = new ArrayList();
    private final ArrayList<Entity> bufferAdd = new ArrayList();
    private Player player1, player2;
    Graphics graphics;
    CollisionLookup collisions = new CollisionLookup();
    
    private final int windowWidth, windowHeight;
    private int level;
    private LevelManager levelMgr;
    private boolean paused, inMenu, inOptions;
    private boolean canChangeDirection;
    public Scoreboard scoreboard;
    public int currentNibbleNum;
    
    public Nibbles(Graphics gIn, int width, int height, int numP) {
        graphics = gIn;
        windowWidth = width;
        windowHeight = height;
        numPlayers = numP;
        level = 1;
        currentNibbleNum = 1;
        canChangeDirection = true;
        paused = false;
        inMenu = true;
        inOptions = false;
        scoreboard = new Scoreboard(scoreX, scoreY, graphics);
        bufferAdd.add(scoreboard);
        levelMgr = new LevelManager(level, graphics);
        levelMgr.setupLevel(bufferAdd);
        player1 = new Player(1, 0, 5, null);
        if(numPlayers == 2)
        {
            player2 = new Player(2, 0, 5, null);
        }
        setUpLevel();
        initCollisions();
        playSound("IntroTune.wav");
    }
    
    /**
     * Called once per tick in order to draw game onto the screen
     */
    private void draw()
    {
        // draw blue background
        graphics.setColor(Color.BLUE);
        graphics.fillRect(0, 0, windowWidth, windowHeight);
        
        // draw each object in drawables list
        for(IDrawable d : entities)
            d.draw();
    }
    
    /**
     * Called once per tick in order to update the game state, such as moving
     * the snake and detecting collisions
     */
    private void update()
    {
        for(int i = 0; i < entities.size(); i++)
        {
            ICollidable current = entities.get(i);
            if(current.areCollided(player1.getSnake()))
                collisions.runCollision(player1.getSnake(), current);//TODO: implement system to check for all snakes
        }
        for(Entity current : bufferRemove) {
            entities.remove(current);
        }
        for(Entity current : bufferAdd) {
            entities.add(current);
        }
        bufferAdd.clear();
        bufferRemove.clear();
        canChangeDirection = true;
        
        scoreboard.setScore(player1.getKey(), player1.getScore());
        if(player2 != null)
            scoreboard.setScore(player2.getKey(), player2.getScore());
    }
    
    public void tick() {
        update();
        draw();
    }
    
    public void setMenu(int menu) {
       switch (menu) {
           case -1:
               inMenu = false;
               inOptions = false;
               break;
           case 0:
               inMenu = true;
               inOptions = false;
               break;
           case 1:
               inMenu = false;
               inOptions = true;
               break;
           default:
               break;
       }
    }
    
    public void drawMenu(String menu) {
        graphics.setColor(Color.BLACK);
        graphics.fillRect(0, 0, windowWidth, windowHeight);
        Path path = Paths.get("src\\nibbles\\", menu + ".txt");
        int row = 1;
        try {
            List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
            for (String line : lines) {
                if (line.startsWith("|C|")) {
                    String colorString = line.substring(3);
                    Field field = Class.forName("java.awt.Color").getField(colorString);
                    Color color = (Color)field.get(null);
                    graphics.setColor(color);
                } else {
                    centerText(line, row);
                }
                row++;
            }
        } catch (IOException | ClassNotFoundException
                | NoSuchFieldException | SecurityException
                | IllegalArgumentException | IllegalAccessException e) { }

    }
    
    public void sparklePause() 
    {
       int row; //row was set to 2 and never used
       graphics.clearRect(0, 0, windowWidth, windowHeight);
       graphics.setColor(Color.BLACK);
       graphics.fillRect(0, 0, windowWidth, windowHeight);
       graphics.setFont(new Font("Px437 VGA SquarePx", Font.PLAIN, fontSize));
       graphics.setColor(Color.LIGHT_GRAY);
       row = 15;
       centerText("Game is Paused", row);       
    }
    
    public void setSnakeDirection(EnumDirection direct, int key) 
    {
        Snake snakeToChange = key == 1 ? player1.getSnake() : player2.getSnake();
        if(snakeToChange != null && canChangeDirection)
        {
            canChangeDirection = false;
            snakeToChange.SetDirection(direct);
        }
    }
    
    public boolean isPaused()
    {
        return paused;
    }
    
    public boolean inMainMenu()
    {
        return inMenu;
    }
    
    public boolean inOptionsMenu() {
        return inOptions;
    }
    
    public boolean isSnakeAlive(int playerNum)
    {
        return true;
    }
    
    public void setPaused(boolean val)
    {
        paused = val;
    }
    
    public void quitGame()
    {
        paused = false;
        inMenu = true;
        killSnake(1);
    }
    
    private void spawnNewSnake(int key)
    {
        //spawn new snake at valid location
        Pair pair = levelMgr.getSpawnLocation(key);
        Snake snakeToAdd = new Snake(pair.x, pair.y, graphics, key,
                new SnakePart(graphics, pair.x, pair.y - 1));
        
        // remove snake if one exists for this key
        // set player's new snake and add to entity collection
        Player p = key == 1 ? player1 : player2;
        if(p != null)
        {
            if(p.getSnake() != null)
                bufferRemove.add(p.getSnake());
            bufferAdd.add(snakeToAdd);
            p.setSnake(snakeToAdd);
        }
    }
    
    private void killSnake(int key)
    {
        Player p = key == 1 ? player1 : player2;
        if(p != null && p.getSnake() != null)
        {
            bufferRemove.add(p.getSnake());
            p.setSnake(null);
        }
    }   
    
    public int getLevel() {
        return level;
    }
    
    /**
     * Clears entities list and loads new list from file for the next level. 
     */
    public void setUpLevel() {
        entities.clear();
        levelMgr = new LevelManager(level, graphics);
        levelMgr.setupLevel(bufferAdd);
        currentNibbleNum = 1;
        spawnNewFood(currentNibbleNum);
        killSnake(1);
        spawnNewSnake(1);
        if(numPlayers == 2)
        {
            killSnake(2);
            spawnNewSnake(2);
        }
        bufferAdd.add(scoreboard);
    }
    
    private void centerText(String text, int row) {
       int xVal, yVal;
       FontMetrics fm = graphics.getFontMetrics();
       xVal = (windowWidth - fm.stringWidth(text)) / 2;
       yVal = (row * fm.getHeight()) + fm.getAscent();
       graphics.drawString(text, xVal, yVal);
    }
    
    private void handleSnakeDeath(Snake snake)
    {
        Player p = snake.equals(player1.getSnake()) ? player1 : player2;
        int currentPoints = p.getScore() - deathPenalty;
	p.setScore(currentPoints);
        scoreboard.setScore(p.getKey(), currentPoints);
        // if there are lives left to play
        if(p.decrementLives())
        {
            spawnNewSnake(p.getKey());
        }
        else
        {
            quitGame();
        }
    }
    
    private void spawnNewFood(int value) {
        Pair pos = levelMgr.getRandomFoodLocation();
        Edibles food = new Edibles(pos.x, pos.y, value, graphics);
        boolean isValid = false;
        while(!isValid) {
            isValid = true;
            for(Entity current : entities) {
                if(food.areCollided(current)) {
                    isValid = false;
                    pos = levelMgr.getRandomFoodLocation();
                    food = new Edibles(pos.x, pos.y, value, graphics);
                }
            }
        }
        entities.add(food);
    }
    
    private void initCollisions() {
        collisions.register(Snake.class, Snake.class, 
                (ICollisionRun<Snake, Snake>) (Snake firstSnake, Snake secondSnake) -> {
            handleSnakeDeath(firstSnake);
        });
        collisions.register(Snake.class, Wall.class, 
                (ICollisionRun<Snake, Wall>) (Snake snake, Wall boundary) -> {
            handleSnakeDeath(snake);
        });
        collisions.register(Snake.class, Edibles.class, 
                (ICollisionRun<Snake, Edibles>) (Snake snake, Edibles food) -> {
            Player p;
            if(snake.equals(player1.getSnake()))
            {
                p = player1;
            }
            else //if(snake.equals(player2.getSnake()))
            {
                p = player2;
            }
            snake.growSnake(food.getValue());
            p.addPoints(food.getValue() * 100);
            bufferRemove.add(food);
            
            if(currentNibbleNum < 9)
            {
                spawnNewFood(++ currentNibbleNum);
            }
            else
            {
                level++;
                setUpLevel();
                setPaused(true);
            }
        });
    }
    
    private void playSound(String fileName) {
        try 
        {
            Clip clip = AudioSystem.getClip();
            URL url = this.getClass().getResource(fileName);
            AudioInputStream audioIn = AudioSystem.getAudioInputStream(url);
            clip.open(audioIn);
            clip.start(); 
        }
        catch(Exception e)
        {
            //LAZY GOOD FOR NOTHING TRY-CATCH!
            //Cuz we're real programmers -Steven
        }
    }
    
    public void incLevel()
    {
        // Cheat Code
        level++;
        setUpLevel();
    }
}
