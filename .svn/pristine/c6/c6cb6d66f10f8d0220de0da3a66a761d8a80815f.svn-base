package nibbles;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.io.IOException;
import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import nibbles.CollisionLookup.ICollisionRun;

/**
 *
 * @author Steven
 */
public class Nibbles {
    
   private final int fontSize = 30;
   
    private ArrayList<IDrawable> drawables = new ArrayList<>();
    private ArrayList<ICollidable> collidables = new ArrayList<>();
    private ArrayList<Snake> snakes = new ArrayList<>();
    private ArrayList bufferRemove = new ArrayList();
    private ArrayList bufferAdd = new ArrayList();
    Graphics graphics;
    CollisionLookup collisions = new CollisionLookup();
    
    private int windowWidth, windowHeight;
    private int lvl;
    private LevelManager levelMgr;
    private boolean paused, inMenu, inOptions;
    private boolean canChangeDirection;
    public  Edibles score;
    
    public Nibbles(Graphics gIn, int width, int height, int...keys) {
        graphics = gIn;
        windowWidth = width;
        windowHeight = height;
        for(int key : keys)
            this.spawnNewSnake(key, gIn);
        snakes.get(0).SetDirection(EnumDirection.DOWN);
        canChangeDirection = true;
        paused = false;
        inMenu = true;
        inOptions = false;
        collidables.add(new Wall(0, 0, width, height, graphics));
        initCollisions();
        Edibles food = new Edibles(500, 500, 1, gIn);
        collidables.add(food);
        drawables.add(food);
        score = new Edibles(1200, 100, snakes.get(0).getValue(), graphics);
        drawables.add(score);
        lvl = 2;
        levelMgr = new LevelManager(lvl, graphics);
        incLevel();
    }
    
    public void tick() {
        graphics.setColor(Color.BLUE);
        graphics.fillRect(0, 0, windowWidth, windowHeight);
        Iterator<IDrawable> iterDraw = drawables.iterator();
        while(iterDraw.hasNext())
            iterDraw.next().Draw(Color.red);
        for(ICollidable current : collidables)
            if(!snakes.isEmpty() && current.areCollided(snakes.get(0)))
                collisions.runCollision(snakes.get(0), current);
        for(Object current : bufferRemove) {
            if(current instanceof IDrawable)
                drawables.remove(current);
            if(current instanceof ICollidable)
                collidables.remove(current);
        }
        for(Object current : bufferAdd) {
            if(current instanceof IDrawable)
                drawables.add((IDrawable)current);
            if(current instanceof ICollidable)
                collidables.add((ICollidable)current);
        }
        bufferAdd.clear();
        bufferRemove.clear();
        canChangeDirection = true;
    }
    
    public void setMenu(int menu) {
       switch (menu) {
           case -1:
               inMenu = false;
               inOptions = false;
               break;
           case 0:
               inMenu = true;
               inOptions = false;
               break;
           case 1:
               inMenu = false;
               inOptions = true;
               break;
           default:
               break;
       }
    }
    
    public void drawMenu(String menu) {
        graphics.clearRect(0, 0, windowWidth, windowHeight);
        graphics.setColor(Color.BLACK);
        graphics.fillRect(0, 0, windowWidth, windowHeight);
        Path path = Paths.get("src\\nibbles\\", menu + ".txt");
        int row = 1;
        try {
            List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);
            for (String line : lines) {
                if (line.startsWith("|C|")) {
                    String colorString = line.substring(3);
                    Field field = Class.forName("java.awt.Color").getField(colorString);
                    Color color = (Color)field.get(null);
                    graphics.setColor(color);
                } else {
                    centerText(line, row);
                }
                row++;
            }
        } catch (IOException | ClassNotFoundException
                | NoSuchFieldException | SecurityException
                | IllegalArgumentException | IllegalAccessException e) { }
    }
    
    public void sparklePause() 
    {
       int row = 2;
       graphics.clearRect(0, 0, windowWidth, windowHeight);
       graphics.setColor(Color.BLACK);
       graphics.fillRect(0, 0, windowWidth, windowHeight);
       //graphics.setFont(new Font("More Perfect DOS VGA", Font.PLAIN, fontSize));
       graphics.setFont(new Font("Px437 VGA SquarePx", Font.PLAIN, fontSize));
       graphics.setColor(Color.LIGHT_GRAY);
       row = 15;
       centerText("Game is Paused", row);       
    }
    
    public void setSnakeDirection(EnumDirection direct, int key) {
        Snake snakeToChange = this.getSnake(key);
        if(snakeToChange != null && canChangeDirection)
        {
            canChangeDirection = false;
            snakeToChange.SetDirection(direct);
        }
    }
    
    private Snake getSnake(int key) {
        for(Snake current : this.snakes)
            if(key == current.getKey())
                return current;
        return null;
    }
    
    public boolean isPaused()
    {
        return paused;
    }
    
    public boolean inMainMenu()
    {
        return inMenu;
    }
    
    public boolean inOptionsMenu() {
        return inOptions;
    }
    
    public boolean isSnakeAlive(int playerNum)
    {
        return true;
    }
    
    public void setPaused(boolean val)
    {
        paused = val;
    }
    
    public void quitGame()
    {
        paused = false;
        inMenu = true;
        killSnake(0);
    }
    
    public void spawnNewSnake(int key, Graphics graphics)
    {
        int x = 250;
        int y = 250;
        Snake snakeToAdd = new Snake(x, y, graphics, key,
                new SnakePart(graphics, x, y));
        this.snakes.add(snakeToAdd);
        this.drawables.add(snakeToAdd);
    }
    
    public void killSnake(int key)
    {
        Snake snakeToRemove = this.getSnake(key);
        if(snakeToRemove != null) {
            this.snakes.remove(snakeToRemove);
            this.drawables.remove(snakeToRemove);
        }
        spawnNewSnake(0, graphics);
    }   
    
    public int getLevel() {
        return lvl;
    }
    
    public void incLevel() {
        //lvl ++;
        loadLevel(++ lvl);
    }
    
    public void loadLevel(int level)
    {
        levelMgr = new LevelManager(level, graphics);
        levelMgr.setupLevel(collidables, drawables);
    }
    
    private void centerText(String text, int row) {
       int xVal, yVal;
       FontMetrics fm = graphics.getFontMetrics();
       xVal = (windowWidth - fm.stringWidth(text)) / 2;
       yVal = (row * fm.getHeight()) + fm.getAscent();
       graphics.drawString(text, xVal, yVal);
    }
    
    private void initCollisions() {
        collisions.register(Snake.class, Snake.class, new ICollisionRun<Snake, Snake>() {
            public void run(Snake firstSnake, Snake secondSnake) {
                quitGame();
            }
        });
        collisions.register(Snake.class, Wall.class, new ICollisionRun<Snake, Wall>() {
            public void run(Snake snake, Wall boundary) {
                quitGame();
            }
        });
        collisions.register(Snake.class, Edibles.class, new ICollisionRun<Snake, Edibles>() {
            public void run(Snake snake, Edibles food) {
                snakes.get(0).growSnake(food.getValue());
                bufferRemove.add(food);
                bufferRemove.add(score);
                
                if(food.getValue() < 9)
                {
                    Pair coords = levelMgr.getRandomFoodLocation();
                    //int x = (int)(Math.random() * (windowWidth - 20));
                    //int y = (int)(Math.random() * (windowHeight - 20));
                    bufferAdd.add(new Edibles(coords.x, coords.y, food.getValue() + 1, graphics));
                    score = new Edibles(1200, 100, snakes.get(0).getValue(), graphics);
                    bufferAdd.add(score);
                }
                else
                    quitGame();
            }
        });
    }
}
