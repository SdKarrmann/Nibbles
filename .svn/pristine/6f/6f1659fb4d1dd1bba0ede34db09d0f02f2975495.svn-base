/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nibbles;

import com.sun.istack.internal.NotNull;
import com.sun.istack.internal.Nullable;
import java.awt.Color;
import java.awt.Graphics;
import java.util.Iterator;
import java.util.LinkedList;

/**
 * A container class for the necessary components of a snake. This includes the
 * {@link SnakeHead} and all of the {@link SnakePart}s.
 * 
 * @author Steven
 */
public class Snake implements IDrawable, ICollidable {
    
    private LinkedList<SnakePart> snake = new LinkedList<SnakePart>();
    private SnakeHead head;
    private final int key;
    private boolean shouldGrow = false;
    
    public Snake(int headRow, int headCol, @NotNull Graphics graphics, int keyIn, @Nullable SnakePart...parts) {
        head = new SnakeHead(graphics, headRow, headCol);
        for(SnakePart part : parts)
            snake.add(part);
        key = keyIn;
    }
    
    public Snake(Snake s)
    {
        key = 0;
    }
    
    /**
     * Moves the {@link Snake} in the stored {@link EnumDirection} and draws it.
     * 
     * @param color The color to use when drawing the {@link SnakePart}s.
     */
    @Override
    public void Draw(Color color) {
        if(!snake.isEmpty()) {
            snake.addFirst(new SnakePart(head.getGraphics(), head.getX(), head.getY()));
            if(!shouldGrow)
                snake.removeLast();
        }
        EnumDirection direct = head.getDirection();
        head.setY(head.getY() + direct.VERTICAL * SnakePart.WIDTH);
        head.setX(head.getX() + direct.HORIZONTAL * SnakePart.WIDTH);
        head.Draw(color);
        Iterator<SnakePart> iter = snake.iterator();
        while(iter.hasNext())
            iter.next().Draw(color);
        shouldGrow = false;
    }
    
    /**
     * Sets the direction that the {@link Snake}'s head is moving.
     * 
     * @param direct The {@link EnumDirection} that the {@link Snake}'s head is moving.
     */
    public void SetDirection(EnumDirection direct) {
        head.setDirect(direct);
    }
    
    public EnumDirection getDirection() {
        return head.getDirection();
    }
    
    public int getKey() {
        return key;
    }
    
    public void growSnake() {
        this.shouldGrow = true;
    }
    
    @Override
    public boolean equals(Object obj)
    {
       if(obj instanceof Snake)
       {
          Snake rhs = (Snake)obj;
          return head.equals(rhs.head);
       }
       return false;
    }

    @Override
    public boolean areCollided(ICollidable collidable) {
        if(collidable.areCollided(this.head))
            return true;
        else {
            for(SnakePart part : this.snake)
                if(part.areCollided(collidable))
                    return true;
        }
        return false;
    }

    @Override
    public BoundingBox getBoundingBox() {
        return this.head.getBoundingBox();
    }
    
}
