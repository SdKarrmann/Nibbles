/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nibbles;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.function.Consumer;

/**
 *
 * @author Steven
 */
public class Nibbles {
    
   private final int fontSize = 30;
   
    private ArrayList<IDrawable> drawables = new ArrayList<>();
    private ArrayList<ICollidable> collidables = new ArrayList<>();
    private ArrayList<Snake> snakes = new ArrayList<>();
    Graphics graphics;
    
    private int windowWidth, windowHeight;
    private int lvl;
    private boolean paused, inMenu;
    
    public Nibbles(Graphics gIn, int width, int height, int...keys) {
        graphics = gIn;
        windowWidth = width;
        windowHeight = height;
        for(int key : keys)
            this.spawnNewSnake(key, gIn);
        snakes.get(0).SetDirection(EnumDirection.DOWN);
        paused = false;
        inMenu = true;
    }
    
    public void tick() {
       if(Math.random() > 0.7)
       {
          snakes.get(0).growSnake();
          System.out.println("Growth! Must be eating his vegetables");
       }
       // ^^^ REMOVE AFTER LOGIC IS IMPLEMENTED
       
       graphics.clearRect(0, 0, windowWidth, windowHeight);
        Iterator<IDrawable> iterDraw = drawables.iterator();
        while(iterDraw.hasNext())
            iterDraw.next().Draw(Color.red);
        Iterator<ICollidable> iterCollide = collidables.iterator();
        iterCollide.forEachRemaining(new Consumer<ICollidable>() {
            public void accept(ICollidable c) {
                collisionCheck(iterCollide.next(), iterCollide);
            }
        });
    }
    
    public void setMenu(int menu) {
       if (menu == -1) {
          inMenu = false;
       } else {
          inMenu = true;
       }
    }
    
    public void mainMenu() {
       int row = 2;
       graphics.clearRect(0, 0, windowWidth, windowHeight);
       graphics.setColor(Color.BLACK);
       graphics.fillRect(0, 0, windowWidth, windowHeight);
       graphics.setColor(Color.WHITE);
       //graphics.setFont(new Font("More Perfect DOS VGA", Font.PLAIN, fontSize));
       graphics.setFont(new Font("Px437 VGA SquarePx", Font.PLAIN, fontSize));
       centerText("Q B a s i c  N i b b l e s", row++);
       graphics.setColor(Color.LIGHT_GRAY);
       row++;
       centerText("Copyright (C) Microsoft Corporation 1990", row++);
       row++;
       centerText("Nibbles is a game for one or two players.  Navigate your snakes", row++);
       centerText("around the game board trying to eat up numbers while avoiding", row++);
       centerText("running into walls or other snakes.  The more numbers you eat up,", row++);
       centerText("the more points you gain and the longer your snake becomes.", row++);
       row++;
       centerText(" Game Controls ", row++);
       row++;
       centerText("  General             Player 1               Player 2    ", row++);
       centerText("                        (Up)                   (Up)      ", row++);
       centerText("P - Pause                \u2191                      W       ", row++);
       centerText("                     (Left) \u2190   \u2192 (Right)   (Left) A   D (Right)  ", row++);
       centerText("                         \u2193                      S       ", row++);
       centerText("                       (Down)                 (Down)     ", row++);
       row += 4;
       centerText("Press any key to continue", row++);
       //graphics.drawString("test", windowWidth / 2, windowHeight / 2);
    }
    
    public void sparklePause() {
       
    }
    
    private void collisionCheck(ICollidable collide, Iterator<ICollidable> iterIn) {
        Iterator<ICollidable> iter = iterIn;
        iter.forEachRemaining(new Consumer<ICollidable>() {
            public void accept(ICollidable c) {
                if(collide.areCollided(c))
                {
                   // do collision logic here
                   killSnake(0);
                }
            }
        });
    }
    
    public void setSnakeDirection(EnumDirection direct, int key) {
        Snake snakeToChange = this.getSnake(key);
        if(snakeToChange != null)
            snakeToChange.SetDirection(direct);
    }
    
    private Snake getSnake(int key) {
        for(Snake current : this.snakes)
            if(key == current.getKey())
                return current;
        return null;
    }
    
    public boolean isPaused()
    {
        return paused;
    }
    
    public boolean inMainMenu()
    {
        return inMenu;
    }
    
    public boolean isSnakeAlive(int playerNum)
    {
        return true;
    }
    
    public void setPaused(boolean val)
    {
        paused = val;
    }
    
    public void quitGame()
    {
        inMenu = true;
    }
    
    public void spawnNewSnake(int key, Graphics graphics)
    {
        int x = (int)(Math.random() % windowWidth);
        int y = (int)(Math.random() % windowHeight);
        Snake snakeToAdd = new Snake(x, y, graphics, key, new SnakePart(graphics, x, y));
        this.snakes.add(snakeToAdd);
        this.drawables.add(snakeToAdd);
    }
    
    public void killSnake(int key)
    {
        Snake snakeToRemove = this.getSnake(key);
        if(snakeToRemove != null) {
            this.snakes.remove(snakeToRemove);
            this.drawables.remove(snakeToRemove);
        }
    }   
    
    public int getLevel() {
        return lvl;
    }
    
    public void incLevel() {
        lvl ++;
    }
    
    private void centerText(String text, int row) {
       int xVal, yVal;
       FontMetrics fm = graphics.getFontMetrics();
       xVal = (windowWidth - fm.stringWidth(text)) / 2;
       yVal = (row * fm.getHeight()) + fm.getAscent();
       graphics.drawString(text, xVal, yVal);
    }
}
